name: CI

env:
  SERVER_IP: ${{secrets.SERVER_IP}}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  DOCKER_DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # 지금 트리거된 브랜치를 현재 브랜치로 checkout 하겠다
      # 도커 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}
          
      # 도커 빌드 전에 디버깅을 위한 로그 출력
      - name: Debug Build Context
        run: |
          echo "현재 디렉터리 위치:"
          pwd
          
          echo "현재 디렉터리 내 파일 목록:"
          ls -lah
          
          echo "Dockerfile 위치 찾기:"
          find . -name "Dockerfile"


      # 도커 빌드 (Main_Nginx_Dockerfile 경로 지정)
#       - name: Build Docker
#         run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/spring_none_stop_deploy_docker .
# #        run: docker build --platform linux/amd64 -f Main_Nginx_Dockerfile -t "${{ secrets.DOCKER_DOCKERHUB_USERNAME }}/main_server:latest" .




#       # 도커 푸시
#       - name: Push Docker
#         run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/main_server:latest

#       # SSH 접속해서 docker compose 실행
#       - name: Docker compose
#         uses: appleboy/ssh-action@master
#         with:
#           username: ubuntu
#           host: ${{ env.SERVER_IP }}
#           key: ${{ env.EC2_SSH_KEY }}
#           script_stop: true
#           script: |
#             sudo docker pull ${{ env.DOCKER_DOCKERHUB_USERNAME }}/main_server:latest



